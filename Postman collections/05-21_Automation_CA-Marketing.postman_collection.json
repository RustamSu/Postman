{
	"info": {
		"_postman_id": "3ad9e01c-5b90-4e90-b6be-8e43edf0bb0a",
		"name": "05-21_Automation_CA-Marketing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create new Postal Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests['Backend is availible, responce code is 200'] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests['Not authorized, check access token or Log in'] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests['Forbiden'] - false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests['Not found, check if you made correct request'] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests['The instance is not valid'] = false;\r",
							"} else {\r",
							"    tests['Something went wrong. Check response body'] = false;\r",
							"}\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.environment.set(\"id\", jsonData.id);  //add id to environment \r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"id\", jsonData.id);  //add id to environment \r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"postman.setEnvironmentVariable('id',jsonData.id);\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"id\", jsonData.id);\r",
							"\r",
							"pm.test(\"id from env match to Body's id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get('id'));\r",
							"});\r",
							"\r",
							"pm.test('ID key in response', function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get('id'));\r",
							"});\r",
							"pm.test('Body contains string id',() => {\r",
							"    pm.expect(pm.response.text()).to.include('id');\r",
							"})\r",
							"\r",
							"pm.test('Status 200 OK', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
							"tests['Response time is acceptable'] = responseTime < 1000;\r",
							"pm.test('Response assertion', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"pm.test('Response time is less than 1000ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"pm.test(\"id is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get('id'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.unset(\"id\");\r",
							"pm.environment.unset(\"company\");\r",
							"pm.environment.unset(\"firstName\");\r",
							"pm.environment.unset(\"lastName\");\r",
							"pm.environment.unset(\"country\");\r",
							"pm.environment.unset(\"city\");\r",
							"pm.environment.unset(\"subdivision\");\r",
							"pm.environment.unset(\"latitude\");\r",
							"pm.environment.unset(\"longitude\");\r",
							"pm.environment.unset(\"phoneNumber\");\r",
							"pm.environment.unset(\"addressLine1\");\r",
							"pm.environment.unset(\"addressLine2\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "FhyYerbfMETUf7Cr3yB7ji_PleJNt4RmSqkILdIyijk.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTA4LTA4VDIxOjA3OjUwLjQyMFoiLCJ1aWQiOiJhYTM3NWM1OC0wYjAzLTQzZmYtYTZkYy00NzMxOTViOGNlYmEiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImY5MzE0NzFkLWRlNWItNDEzOC1iZTA3LTQ1YmFkYjNmNDQwYSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0wOC0wOVQwMTowNzo1MC40MjBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": {\r\n        \"fullName\": {\r\n            \"firstName\": \"Mike\",\r\n            \"lastName\": \"Olsen\"\r\n        },\r\n        \"company\": \"Mike Co.\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"111 Main Street\",\r\n        \"addressLine2\": \"Apt 555\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"Huntington Beach\",\r\n        \"country\": \"USA\",\r\n        \"subdivision\": \"CA\",\r\n        \"zipCode\": \"92648\",\r\n        \"phoneNumber\": \"111-111-1111\",\r\n        \"location\": {\r\n            \"latitude\": 33.6686675,\r\n            \"longitude\": -118.0008162\r\n        }\r\n    },\r\n    \"setAsDefault\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make default Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests['Backend is availible, responce code is 200'] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests['Not authorized, check access token or Log in'] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests['Forbiden'] - false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests['Not found, check if you made correct request'] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests['The instance is not valid'] = false;\r",
							"} else {\r",
							"    tests['Something went wrong. Check response body'] = false;\r",
							"}\r",
							"\r",
							"pm.test('Response time is less than 1000ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"pm.test(\"Response Header is present and correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header('Connection', 'keep-alive');\r",
							"    pm.response.to.have.header('Server', 'Pepyaka/1.15.10');\r",
							"});\r",
							"pm.test('Address has been updated, OK', function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody('error');\r",
							"    pm.response.to.have.jsonBody({});\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "FhyYerbfMETUf7Cr3yB7ji_PleJNt4RmSqkILdIyijk.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTA4LTA4VDIxOjA3OjUwLjQyMFoiLCJ1aWQiOiJhYTM3NWM1OC0wYjAzLTQzZmYtYTZkYy00NzMxOTViOGNlYmEiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImY5MzE0NzFkLWRlNWItNDEzOC1iZTA3LTQ1YmFkYjNmNDQwYSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0wOC0wOVQwMTowNzo1MC40MjBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/default",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check All addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests['Backend is availible, responce code is 200'] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests['Not authorized, check access token or Log in'] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests['Forbiden'] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests['Not found, check if you made correct request'] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests['The instance is not valid'] = false;\r",
							"} else {\r",
							"    tests['Something went wrong. Check response body'] = false;\r",
							"}\r",
							"\r",
							"pm.test('Status 200 OK', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
							"tests['Response time is acceptable'] = responseTime < 1000;\r",
							"pm.test('Response assertion', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"pm.test('Response time is less than 1000ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.environment.set(\"id\", jsonData.addresses[0].id);  //add id to environment \r",
							"\r",
							"pm.test('ID key in response', function () {\r",
							"    pm.expect(jsonData.addresses[0].id).to.eql(pm.environment.get('id'));\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get('id'));\r",
							"});\r",
							"\r",
							"pm.test(\"id is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.addresses[0].id).to.eql(pm.environment.get('id'));\r",
							"});\r",
							"pm.test(\"fullName is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.addresses[0].fullName.firstName).to.eql(\"Mike\");\r",
							"    pm.expect(jsonData.addresses[0].fullName.lastName).to.eql(\"Olsen\");\r",
							"});\r",
							"\r",
							"pm.test('Body contains string id', () => {\r",
							"    pm.environment.get(\"variable_key\");\r",
							"    pm.expect(pm.response.text()).to.include('id');\r",
							"})\r",
							"\r",
							"//var sum = Object.keys(data).length;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "FhyYerbfMETUf7Cr3yB7ji_PleJNt4RmSqkILdIyijk.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTA4LTA4VDIxOjA3OjUwLjQyMFoiLCJ1aWQiOiJhYTM3NWM1OC0wYjAzLTQzZmYtYTZkYy00NzMxOTViOGNlYmEiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImY5MzE0NzFkLWRlNWItNDEzOC1iZTA3LTQ1YmFkYjNmNDQwYSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0wOC0wOVQwMTowNzo1MC40MjBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Specific address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests['Backend is availible, responce code is 200'] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests['Not authorized, check access token or Log in'] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests['Forbiden'] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests['Not found, check if you made correct request'] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests['The instance is not valid'] = false;\r",
							"} else {\r",
							"    tests['Something went wrong. Check response body'] = false;\r",
							"}\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.environment.set(\"id\", jsonData.address.id);  //add id to environment \r",
							"\r",
							"pm.test('ID key in response', function () {\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get('id'));\r",
							"});\r",
							"\r",
							"pm.test('Body contains string id', () => {\r",
							"    pm.environment.get(\"variable_key\");\r",
							"    pm.expect(pm.response.text()).to.include('id');\r",
							"})\r",
							"\r",
							"pm.test('Status 200 OK', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
							"tests['Response time is acceptable'] = responseTime < 1000;\r",
							"pm.test('Response assertion', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"pm.test('Response time is less than 1000ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"pm.test(\"id from env match to Body's id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get('id'));\r",
							"});\r",
							"pm.test(\"id is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get('id'));\r",
							"});\r",
							"pm.test(\"fullName is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Mike\");\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(\"Olsen\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "FhyYerbfMETUf7Cr3yB7ji_PleJNt4RmSqkILdIyijk.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTA4LTA4VDIxOjA3OjUwLjQyMFoiLCJ1aWQiOiJhYTM3NWM1OC0wYjAzLTQzZmYtYTZkYy00NzMxOTViOGNlYmEiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImY5MzE0NzFkLWRlNWItNDEzOC1iZTA3LTQ1YmFkYjNmNDQwYSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0wOC0wOVQwMTowNzo1MC40MjBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{id}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Specific address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests['Backend is availible, responce code is 200'] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests['Not authorized, check access token or Log in'] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests['Forbiden'] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests['Not found, check if you made correct request'] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests['The instance is not valid'] = false;\r",
							"} else {\r",
							"    tests['Something went wrong. Check response body'] = false;\r",
							"}\r",
							"pm.test('Status 200 OK', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
							"tests['Response time is acceptable'] = responseTime < 1000;\r",
							"pm.test('Response assertion', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"pm.test('Response time is less than 1000ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"/*\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.environment.set(\"id\", jsonData.address.id);  //add id to environment \r",
							"\r",
							"pm.test('Body contains string id', () => {\r",
							"    pm.environment.get(\"variable_key\");\r",
							"    pm.expect(pm.response.text()).to.include('id');\r",
							"})\r",
							"\r",
							"pm.test(\"Body contains correct data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get('id'));\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Alex\");\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(\"Leonov\");\r",
							"});\r",
							"*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"company\", \"Google-\" + new Date().getTime());\r",
							"\r",
							"zpCd = Math.floor(Math.random()*90000) + 10000\r",
							"zpCd = zpCd.toString()\r",
							"pm.environment.set(\"zipCode\", zpCd);\r",
							"\r",
							"pm.environment.set(\"firstName\", (pm.variables.replaceIn(\"{{$randomFirstName}}\")));\r",
							"pm.environment.set(\"lastName\", (pm.variables.replaceIn(\"{{$randomLastName}}\")));\r",
							"pm.environment.set(\"country\", (pm.variables.replaceIn(\"{{$randomCountry}}\")));\r",
							"pm.environment.set(\"city\", (pm.variables.replaceIn(\"{{$randomCity}}\")));\r",
							"pm.environment.set(\"subdivision\", (pm.variables.replaceIn(\"{{$randomCountryCode}}\")));\r",
							"pm.environment.set(\"latitude\", (pm.variables.replaceIn(\"{{$randomLatitude}}\")));\r",
							"pm.environment.set(\"longitude\", (pm.variables.replaceIn(\"{{$randomLongitude}}\")));\r",
							"pm.environment.set(\"phoneNumber\", (pm.variables.replaceIn(\"{{$randomPhoneNumber}}\")));\r",
							"\r",
							"pm.environment.set(\"addressLine1\", (pm.variables.replaceIn(\"{{$randomInt}}, {{$randomStreetName}}\")));\r",
							"pm.environment.set(\"addressLine2\", (pm.variables.replaceIn(\"{{$randomInt}}\")));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "FhyYerbfMETUf7Cr3yB7ji_PleJNt4RmSqkILdIyijk.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTA4LTA4VDIxOjA3OjUwLjQyMFoiLCJ1aWQiOiJhYTM3NWM1OC0wYjAzLTQzZmYtYTZkYy00NzMxOTViOGNlYmEiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImY5MzE0NzFkLWRlNWItNDEzOC1iZTA3LTQ1YmFkYjNmNDQwYSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0wOC0wOVQwMTowNzo1MC40MjBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": {\r\n        \"id\": \"{{id}}\",\r\n        \"fullName\": {\r\n            \"firstName\": \"{{firstName}}\",\r\n            \"lastName\": \"{{lastName}}\"\r\n        },\r\n        \"company\": \"{{company}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"addressLine2\": \"{{addressLine2}}\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"{{city}}\",\r\n        \"country\": \"{{country}}\",\r\n        \"subdivision\": \"{{subdivision}}\",\r\n        \"zipCode\": \"{{zipCode}}\",\r\n        \"phoneNumber\": \"{{phoneNumber}}\",\r\n        \"location\": {\r\n            \"latitude\": \"{{latitude}}\",\r\n            \"longitude\": \"{{longitude}}\"\r\n        }\r\n    },\r\n    \"setAsDefault\": false,\r\n    \"fieldMask\": {\r\n        \"paths\": [\r\n            \"fullName.firstName\",\r\n            \"fullName.lastName\",\r\n            \"company\",\r\n            \"addressLine1\",\r\n            \"addressLine2\",\r\n            \"city\",\r\n            \"country\",\r\n            \"subdivision\",\r\n            \"zipCode\",\r\n            \"phoneNumber\",\r\n            \"location.latitude\",\r\n            \"location.longitude\",\r\n            \"setAsDefault\"\r\n        ]\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Updated Specific address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests['Backend is availible, responce code is 200'] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests['Not authorized, check access token or Log in'] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests['Forbiden'] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests['Not found, check if you made correct request'] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests['The instance is not valid'] = false;\r",
							"} else {\r",
							"    tests['Something went wrong. Check response body'] = false;\r",
							"}\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.environment.set(\"id\", jsonData.address.id);  //add id to environment \r",
							"\r",
							"pm.test('ID key in response', function () {\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get('id'));\r",
							"});\r",
							"\r",
							"pm.test('Body contains string id', () => {\r",
							"    pm.environment.get(\"variable_key\");\r",
							"    pm.expect(pm.response.text()).to.include('id');\r",
							"})\r",
							"\r",
							"pm.test('Status 200 OK', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
							"tests['Response time is acceptable'] = responseTime < 1000;\r",
							"pm.test('Response assertion', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"pm.test('Response time is less than 1000ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"pm.test(\"Body's data is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get('id'));\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get('firstName'));\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get('lastName'));\r",
							"    pm.expect(jsonData.address.country).to.eql(pm.environment.get('country'));\r",
							"    pm.expect(jsonData.address.zipCode).to.eql(pm.environment.get('zipCode'));\r",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get('company'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "FhyYerbfMETUf7Cr3yB7ji_PleJNt4RmSqkILdIyijk.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTA4LTA4VDIxOjA3OjUwLjQyMFoiLCJ1aWQiOiJhYTM3NWM1OC0wYjAzLTQzZmYtYTZkYy00NzMxOTViOGNlYmEiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImY5MzE0NzFkLWRlNWItNDEzOC1iZTA3LTQ1YmFkYjNmNDQwYSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0wOC0wOVQwMTowNzo1MC40MjBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests['Backend is availible, responce code is 200'] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests['Not authorized, check access token or Log in'] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests['Forbiden'] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests['Not found, check if you made correct request'] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests['The instance is not valid'] = false;\r",
							"} else {\r",
							"    tests['Something went wrong. Check response body'] = false;\r",
							"}\r",
							"/*\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.environment.set(\"id\", jsonData.address.id);  //add id to environment \r",
							"\r",
							"pm.test('Body contains string id', () => {\r",
							"    pm.environment.get(\"variable_key\");\r",
							"    pm.expect(pm.response.text()).to.include('id');\r",
							"})\r",
							"*/\r",
							"pm.test('Status 200 OK', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"tests['Response code is 200 OK'] = responseCode.code === 200;\r",
							"tests['Response time is acceptable'] = responseTime < 1000;\r",
							"pm.test('Response assertion', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"pm.test('Response time is less than 1000ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"/*\r",
							"pm.test(\"Body contains correct data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get('id'));\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Mike\");\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(\"Olsen\");\r",
							"});\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "FhyYerbfMETUf7Cr3yB7ji_PleJNt4RmSqkILdIyijk.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTA4LTA4VDIxOjA3OjUwLjQyMFoiLCJ1aWQiOiJhYTM3NWM1OC0wYjAzLTQzZmYtYTZkYy00NzMxOTViOGNlYmEiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImY5MzE0NzFkLWRlNWItNDEzOC1iZTA3LTQ1YmFkYjNmNDQwYSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0wOC0wOVQwMTowNzo1MC40MjBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Deleted address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests['Backend is availible, responce code is 200'] = true;\r",
							"} else if(responseCode.code === 400) {\r",
							"    tests['Address is deleted, responce code is 400'] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests['Not authorized, check access token or Log in'] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests['Forbiden'] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests['Not found, check if you made correct request'] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests['The instance is not valid'] = false;\r",
							"} else {\r",
							"    tests['Something went wrong. Check response body'] = false;\r",
							"}\r",
							"\r",
							"pm.test('Status 400 OK', function () {\r",
							"    pm.response.to.have.status(400);\r",
							"})\r",
							"tests['Response code is 400 OK'] = responseCode.code === 400;\r",
							"tests['Response time is acceptable'] = responseTime < 1000;\r",
							"pm.test('Response assertion', function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"pm.test('Response time is less than 1000ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"pm.test(\"message is included previously deleted id\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('message',(pm.environment.get('id')));\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + pm.environment.get('id'));\r",
							"});\r",
							"pm.test(\"Order can't be deleted, nonexist. As expected.\", function () {\r",
							"    pm.response.to.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.be.an('object');\r",
							"    pm.response.to.be.not.have.jsonBody(\"error\");\r",
							"});\r",
							"pm.test(\"Message is include previouly deleted id\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"message\", (pm.environment.get('id')));\r",
							"});\r",
							"pm.test(\"Message details is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + pm.environment.get('id'));\r",
							"});\r",
							"//tests['fffffffffff'] = true"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "FhyYerbfMETUf7Cr3yB7ji_PleJNt4RmSqkILdIyijk.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTA4LTA4VDIxOjA3OjUwLjQyMFoiLCJ1aWQiOiJhYTM3NWM1OC0wYjAzLTQzZmYtYTZkYy00NzMxOTViOGNlYmEiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImY5MzE0NzFkLWRlNWItNDEzOC1iZTA3LTQ1YmFkYjNmNDQwYSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0wOC0wOVQwMTowNzo1MC40MjBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Deleted Specific address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (responseCode.code === 200) {\r",
							"    tests['Backend is availible, responce code is 200'] = true;\r",
							"} else if(responseCode.code === 400) {\r",
							"    tests['Address is deleted, responce code is 400'] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests['Not authorized, check access token or Log in'] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests['Forbiden'] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests['Not found, check if you made correct request'] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests['The instance is not valid'] = false;\r",
							"} else {\r",
							"    tests['Something went wrong. Check response body'] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"message details id is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.details.cant_find).to.eql('address_id: ' + pm.environment.get('id'));\r",
							"});\r",
							"pm.test('Status 400 OK', function () {\r",
							"    pm.response.to.have.status(400);\r",
							"})\r",
							"tests['Response code is 400 OK'] = responseCode.code === 400;\r",
							"tests['Response time is acceptable'] = responseTime < 1000;\r",
							"pm.test('Response assertion', function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"pm.test('Response time is less than 1000ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"pm.test(\"Order can't be deleted, nonexist. As expected.\", function () {\r",
							"    pm.response.to.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.be.an('object');\r",
							"    pm.response.to.be.not.have.jsonBody(\"error\");\r",
							"});\r",
							"pm.test(\"Message is include previouly deleted id\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"message\", (pm.environment.get('id')));\r",
							"});\r",
							"pm.test(\"Message details is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + pm.environment.get('id'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "FhyYerbfMETUf7Cr3yB7ji_PleJNt4RmSqkILdIyijk.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTA4LTA4VDIxOjA3OjUwLjQyMFoiLCJ1aWQiOiJhYTM3NWM1OC0wYjAzLTQzZmYtYTZkYy00NzMxOTViOGNlYmEiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImY5MzE0NzFkLWRlNWItNDEzOC1iZTA3LTQ1YmFkYjNmNDQwYSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0wOC0wOVQwMTowNzo1MC40MjBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "",
				"type": "string"
			},
			{
				"key": "value",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
// just comment